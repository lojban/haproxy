global
    maxconn 50000
    log stdout format raw local0
    nbthread 16

    ssl-default-bind-options force-tlsv12 no-tls-tickets
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256

# Each "defaults" section applies until the next one is encountered;
# these defaults affect the non-http endpoints
defaults
    timeout connect 10s
    timeout client 30s
    timeout server 30s

    log global

    maxconn 3000

# Stats access
listen stats
    bind :8900
    mode http
    stats enable
    stats uri     /admin?stats
    stats refresh 5s

# Dict server
frontend dict_frontend
    bind *:2628
    mode tcp
    option tcplog
    default_backend dict_backend

backend dict_backend
    mode tcp
    option tcp-check
    option redispatch
    balance roundrobin
    server dict1 lebna:2628 check inter 90000

# Defaults for all http/https endpoints
defaults
    timeout connect 10s
    timeout client 60s
    timeout server 60s

    log global

    maxconn 3000
    mode http
    option httplog
    option httpchk
    option log-health-checks

    # DO NOT turn on option forwardfor here; this is because it
    # needs to be off for the cloudflare hack below to work.  Set it
    # on the frontends that need it directly.

    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Main lojban.org web server
frontend lojban-http-front
    bind *:19280

    capture request header Host len 64
    capture request header X-Forwarded-For len 64
    capture response header Location len 128

    # This doesn't *really* matter since all traffic is coming from
    # cloudflare, but here's how we seet he source IPs for it when
    # we can do so; from https://stackoverflow.com/a/52271260
    acl from_cf    src -f /usr/local/etc/haproxy/cloudflare_ips.lst
    acl cf_ip_hdr  req.hdr(CF-Connecting-IP) -m found
    http-request set-header X-Forwarded-For %[req.hdr(CF-Connecting-IP)] if from_cf cf_ip_hdr
    # This is the equivalent of "option forwardfor", except that
    # option can't be conditional
    http-request set-header X-Forwarded-For %[src] if !from_cf || !cf_ip_hdr

    # Unconditional forwarding info
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Forwarded-Port 80
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]

    log-format "%ci:%cp [%tr] %ft %b/%s %ST %B %{+Q}hr %{+Q}r %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs"

    # Test URI to see if its a letsencrypt request
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/

    http-request redirect scheme https unless letsencrypt-acl

    use_backend letsencrypt-backend if letsencrypt-acl

frontend jbotcan-websockets
    bind *:9091 ssl crt /etc/letsencrypt/live/lojban.org/haproxy.pem

    capture request header Host len 64
    capture request header X-Forwarded-For len 64
    capture response header Location len 128

    log-format "%ci:%cp [%tr] %ft %b/%s %ST %B %{+Q}hr %{+Q}r %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs"

    use_backend jbotcan-1chat-back if { hdr_beg(host) -i jbotcan. } { nbsrv(jbotcan-1chat-back) ge 1 }
    use_backend nope if { hdr_beg(host) -i jbotcan. }

frontend lojban-https-front
    bind *:19243 ssl crt /etc/letsencrypt/live/lojban.org/haproxy.pem

    capture request header Host len 64
    capture request header X-Forwarded-For len 64
    capture response header Location len 128

    log-format "%ci:%cp [%tr] %ft %b/%s %ST %B %{+Q}hr %{+Q}r %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs"

    # In the old days, www.lojban.org/foo/ would redirect to service
    # foo; continue to handle those situations
    http-request redirect code 301 location https://camxes.lojban.org%[url,regsub(^//*camxes/,/,)] if { path_reg ^\/\/*camxes\/ }
    http-request redirect code 301 location https://jbovlaste.lojban.org%[url,regsub(^//*jbovlaste/,/,)] if { path_reg ^\/\/*jbovlaste\/ }
    http-request redirect code 301 location https://vlasisku.lojban.org%[url,regsub(^//*vlasisku/,/,)] if { path_reg ^\/\/*vlasisku\/ }
    http-request redirect code 301 location https://jbotcan.org%[url,regsub(^//*jbotcan/,/,)] if { path_reg ^\/\/*jbotcan\/ }
    http-request redirect code 301 location https://corpus.lojban.org%[url,regsub(^//*corpus/,/,)] if { path_reg ^\/\/*corpus\/ }

    # This doesn't *really* matter since all traffic is coming from
    # cloudflare, but here's how we seet he source IPs for it when
    # we can do so; from https://stackoverflow.com/a/52271260
    acl from_cf    src -f /usr/local/etc/haproxy/cloudflare_ips.lst
    acl cf_ip_hdr  req.hdr(CF-Connecting-IP) -m found
    http-request set-header X-Forwarded-For %[req.hdr(CF-Connecting-IP)] if from_cf cf_ip_hdr
    # This is the equivalent of "option forwardfor", except that
    # option can't be conditional
    http-request set-header X-Forwarded-For %[src] if !from_cf || !cf_ip_hdr

    # Unconditional forwarding info
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Forwarded-Port 443
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]

    # Test URI to see if its a letsencrypt request
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl

    # jbovlaste config
    use_backend jbovlaste-back if { hdr_beg(host) -i jbovlaste. } { nbsrv(jbovlaste-back) ge 1 }
    use_backend nope if { hdr_beg(host) -i jbovlaste. }

    # jbo tikiwiki config
    use_backend jbotw-back if { hdr_beg(host) -i tiki.lojban. }

    # vlasisku config
    use_backend vls-back if { hdr_beg(host) -i vlasisku. }

    # test vlasisku config
    use_backend test-vls-back if { hdr_beg(host) -i test-vs. }

    # camxes config
    use_backend camxes-back if { hdr_beg(host) -i camxes. }

    # jboski config
    use_backend jboski-back if { hdr_beg(host) -i jboski. }

    # jbotcan config
    use_backend jbotcan-1chat-back if { hdr_beg(host) -i images2.jbotcan } { nbsrv(jbotcan-1chat-back) ge 1 }
    use_backend jbotcan-1chat-back if { hdr_beg(host) -i jbotcan. } { nbsrv(jbotcan-1chat-back) ge 1 } { path_beg /lojban-images }
    use_backend jbotcan-back if { hdr_beg(host) -i jbotcan. } { nbsrv(jbotcan-back) ge 1 }
    use_backend nope if { hdr_beg(host) -i jbotcan. }

    # mw-live config
    use_backend mw-live-back if { hdr_beg(host) -i mw-live. } { nbsrv(mw-live-back) ge 1 }
    use_backend nope if { hdr_beg(host) -i mw-live. }

    # corpus config
    use_backend corpus-back if { hdr_beg(host) -i corpus. } { nbsrv(corpus-back) ge 1 }
    use_backend nope if { hdr_beg(host) -i corpus. }

    # everything else config; use the main apache if it's up,
    # otherwise return 502
    use_backend lojban-https-back if { nbsrv(lojban-https-back) ge 1 }
    use_backend nope

# Send a 502 instead of a 503 if a whole backend is down;
# CloudFlare's Always Online does not work well with 503s
backend nope
    http-request deny deny_status 502

backend lojban-https-back
    http-check send meth HEAD uri / hdr Host www.lojban.org
    server lojban-https-back-web jukni:8443 check inter 90000

    # If someone is asking for the root, use the special redirection page
    http-request redirect code 301 location https://www.lojban.org/mw-redir.html if { path / }

# jbovlaste config
backend jbovlaste-back
    http-check send meth HEAD uri / hdr Host jbovlaste.lojban.org
    server jbovlaste-back-web lebna:8380 check inter 90000

    # strip off leading /jbovlaste/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*jbovlaste/,/,)] if { path_reg ^\/\/*jbovlaste\/ }

# corpus config
backend corpus-back
    http-check send meth HEAD uri / hdr Host corpus.lojban.org
    server corpus-back-web stodi:12401 check inter 90000

    # strip off leading /corpus/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*corpus/,/,)] if { path_reg ^\/\/*corpus\/ }

# jbo tikiwiki config
backend jbotw-back
    http-check send meth HEAD uri / hdr Host tiki.lojban.org

    # Some tikiwiki stuff is *really* slow, so just give it
    # unlimited time; the 512MiB RAM limit is much more likely to be
    # the limiting facter
    timeout server 900s

    server jbotw-back-web stodi:19580 check inter 90000

# vlasisku config
backend vls-back
    http-check send meth HEAD uri / hdr Host vlasisku.lojban.org
    server vls-back-web lebna:20080 check inter 90000

    # strip off leading /vlasisku/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*vlasisku/,/,)] if { path_reg ^\/\/*vlasisku\/ }

# test vlasisku config
backend test-vls-back
    http-check send meth HEAD uri / hdr Host test-vs.lojban.org
    server test-vls-back-web lebna:20080 check inter 90000

    # strip off leading /vlasisku/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*vlasisku/,/,)] if { path_reg ^\/\/*vlasisku\/ }

# camxes config
backend camxes-back
    http-check send meth HEAD uri / hdr Host camxes.lojban.org
    server camxes-back-web jukni:13080 check inter 90000

    # strip off leading /camxes/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*camxes/,/,)] if { path_reg ^\/\/*camxes\/ }

# jboski config
backend jboski-back
    http-check send meth HEAD uri / hdr Host jboski.lojban.org
    server jboski-back-web stodi:20180 check inter 90000

    # strip off leading /jboski/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*jboski/,/,)] if { path_reg ^\/\/*jboski\/ }


# jbotcan config
backend jbotcan-back
    http-check send meth HEAD uri / hdr Host jbotcan.org
    server jbotcan-back-web lebna:14080 check inter 90000

    # strip off leading /jbotcan/ from URLs
    http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(^//*jbotcan/,/,)] if { path_reg ^\/\/*jbotcan\/ }

backend jbotcan-1chat-back
    # Silently strip off leading /lojban-images/ for the backend call
    http-request set-path %[path,regsub(^//*lojban-images/,/,)] if { path_reg ^\/\/*lojban-images\/ }

    # This server doesn't respond well to GET /
    # http-check send meth HEAD uri / hdr Host jbotcan.org
    option tcp-check
    server jbotcan-1chat-back-web stodi:9091 check inter 90000


# LE Backend
backend letsencrypt-backend
    server letsencrypt 127.0.0.1:8888

# mw-live backend
backend mw-live-back
    # robots.txt only lives in one place
    http-request redirect code 301 location https://www.lojban.org/robots.txt if { path /robots.txt }

    http-check send meth HEAD uri / hdr Host mw-live.lojban.org
    server mw-live-back-web lebna:11082 check inter 90000

    # If someone is asking for the root, use the special redirection page
    http-request redirect code 301 location https://www.lojban.org/mw-redir.html if { path / }
